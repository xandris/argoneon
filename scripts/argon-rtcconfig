#!/usr/bin/env bash

rtcconfigfile=/etc/argon/rtc.conf

CHECKPLATFORM="Others"
# Check if Raspbian
grep -q -F 'Raspbian' /etc/os-release &> /dev/null
if [ $? -eq 0 ]; then
	CHECKPLATFORM="Raspbian"
fi


get_number () {
	local curnumber
	read curnumber
	if [ -z "$curnumber" ]; then
		echo "-2"
		return
	elif [[ $curnumber =~ ^[+-]?[0-9]+$ ]]; then
		if [ $curnumber -lt 0 ]; then
			echo "-1"
			return
		elif [ $curnumber -gt 100 ]; then
			echo "-1"
			return
		fi	
		echo $curnumber
		return
	fi
	echo "-1"
	return
}

configure_schedule () {
	local scheduleloopflag=1
	while [ $scheduleloopflag -eq 1 ]; do
		echo "--------------------------------"
		echo " Configure Schedule "
		echo "--------------------------------"
		echo "  1. Add Schedule"
		echo "  or"
		echo "  Remove Schedule"
		argoneond getschedulelist
		echo
		echo " 99. Exit"
		echo "  0. Back"
		echo -n "Enter Number:"

		newmode=$( get_number )
		case "$newmode" in
		0)
			scheduleloopflag=0
			;;
		99)
			scheduleloopflag=0
			rtcloopflag=2
			;;
		1)
			configure_newschedule
			;;
		*)
			if [ $newmode -gt 1 ]; then
				echo "CONFIRM SCHEDULE REMOVAL"
				argoneond showschedule $newmode
				echo -n "Press Y to remove schedule #$newmode:"
				read -n 1 confirm
				if [[ "$confirm" = [yY] ]]; then
					argoneond removeschedule $newmode
					systemctl restart argoneond.service
				fi
				echo ""
			fi
		esac
	done
}

configure_newschedule () {

	local cmdmode=1
	local hour=8
	local minute=0
	local minuteprefix=":0"
	local dayidx=0
	local repeat=1

	local subloopflag=1
	while [ $subloopflag -eq 1 ]; do
		minuteprefix=":0"
		if [ $minute -ge 10 ]; then
			minuteprefix=":"
		fi

		local typestr="Shutdown"
		if [ $cmdmode -eq 1 ]; then
			typestr="Startup"
		fi

		local daystr="Daily"
		case "$dayidx" in
		1) daystr="Mon" ;;
		2) daystr="Tue" ;;
		3) daystr="Wed" ;;
		4) daystr="Thu" ;;
		5) daystr="Fri" ;;
		6) daystr="Sat" ;;
		7) daystr="Sun" ;;
		esac

		local repeatstr="Yes"
		if [ $repeat -eq 0 ]; then
			repeatstr="Once"
			if [ $dayidx -eq 0 ]; then
				daystr="Next Occurence"
			fi
		fi

		echo "--------------------------------"
		echo " Configure Schedule"
		echo "--------------------------------"
		echo "  1. Type: $typestr"
		echo "  2. Set Time: $hour$minuteprefix$minute"
		echo "  3. Repeating: $repeatstr"
		echo "  4. Day: $daystr"
		echo
		echo "  5. Add Schedule"
		echo
		echo "  0. Cancel"
		echo -n "Enter Number (0-5):"

		local setmode=$( get_number )
		case "$setmode" in
		0)
			subloopflag=0
			;;
		1)
			echo "--------------------------------"
			echo " Schedule Type "
			echo "--------------------------------"
			echo "  1. Startup"
			echo "  2. Shutdown"
			echo
			echo -n "Enter Number (1-2):"

			local tmpval=$( get_number )
			if [ $tmpval -eq 1 ]; then
				cmdmode=1
			elif [ $tmpval -eq 2 ]; then
				cmdmode=0
			else
				echo "Invalid Option"
			fi
			;;
		2)
			echo -n "Enter Hour (0-23):"
			local tmphour=$( get_number )
			echo -n "Enter Minute (0-59):"
			local tmpminute=$( get_number )
			if [[ $tmpminute -ge 0 && $tmpminute -le 59 && $tmphour -ge 0 && $tmphour -le 23 ]]; then
				minute=$tmpminute
				hour=$tmphour
			else
				echo "Invalid value(s)"
			fi
			;;
		3)
			echo -n "Repeat schedule (Y/n)?:"
			read -n 1 confirm
			if [ "$confirm" = "y" ]; then
				repeat=1
			else
				repeat=0
			fi
			;;
		4)
			echo "Select Day of the Week:"
			echo "  0. Daily"
			echo "  1. Monday"
			echo "  2. Tuesday"
			echo "  3. Wednesday"
			echo "  4. Thursday"
			echo "  5. Friday"
			echo "  6. Saturday"
			echo "  7. Sunday"

			echo -n "Enter Number (0-7):"
			tmpval=$( get_number )
			if [[ $tmpval -ge 0 && $tmpval -le 7 ]]; then
				dayidx=$tmpval
			else
				echo "Invalid Option"
			fi
			;;
		5)
			local cronweekday
			if [ $dayidx -eq 0 ]; then
				cronweekday="*"
			elif [ $dayidx -eq 7 ]; then
				cronweekday="7"
			else
				cronweekday=$dayidx
			fi
			cmdcode="off"
			if [ $cmdmode -eq 1 ]; then
				cmdcode="on"
			fi

			echo "$minute $hour * * $cronweekday $cmdcode" >> $rtcconfigfile
			systemctl restart argoneond.service
			subloopflag=0
			;;
		esac
	done
}

rtcloopflag=1
while [ $rtcloopflag -eq 1 ]; do
	echo "----------------------------"
	echo "Argon RTC Configuration Tool"
	echo "----------------------------"
	$pythonbin $argoneonrtcscript GETRTCTIME
	echo "Choose from the list:"
	echo "  1. Update RTC Time"
	echo "  2. Configure Startup/Shutdown Schedules"
	echo 
	echo "  0. Exit"
	echo -n "Enter Number (0-2):"

	newmode=$( get_number )
	if [ $newmode -eq 0 ]; then
		rtcloopflag=0
	elif [[ $newmode -ge 1 && $newmode -le 2 ]]; then
		if [ $newmode -eq 1 ]; then
			echo "Matching RTC Time to System Time..."
			argoneond updatertctime
		elif [ $newmode -eq 2 ]; then
			configure_schedule
		fi
	fi
done

echo
